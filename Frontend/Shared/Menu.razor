@using Frontend.Pages
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject HttpClient Http
@inject Site Site

@if(items is not null) 
{
    @foreach(var item in items) 
    {
        var itemUrl = item.Url.ToString()
            .Replace(Site.Url, "/")
            .TrimEnd('/');

        <NavLink class="@LinkClass" ActiveClass="@LinkActiveClass" href="@itemUrl" Match="@(itemUrl == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix)">
            @item.Title
        </NavLink>
    }
}

@code {
    IEnumerable<MenuItem> items;

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string LinkClass { get; set; }

    [Parameter]
    public string LinkActiveClass { get; set; } = "active";

    protected override async Task OnInitializedAsync() 
    {
        var wordpressUrl = new Uri(Configuration.GetValue<string>("Wordpress:SiteUrl"));

        var navigation = await Http.GetFromJsonAsync<Navigation>($"{wordpressUrl}/wp-json/wp/v2/navigation/10");

        var p = new AngleSharp.Html.Parser.HtmlParser();
        var dom = p.ParseDocument("<html><body></body></html>");
        var nodes = p.ParseFragment(navigation.Content.Rendered, dom.Body);

        items = ((AngleSharp.Html.Dom.IHtmlElement)nodes.First()).Children.Select(x => { 
            var i = x.Children.First();
            return new MenuItem(i.InnerHtml, new Uri(i.GetAttribute("href")).PathAndQuery);    
        });
    }

    public record MenuItem(string Title, string Url);
}