@page "/posts/{*slug}"
@implements IDisposable
@inject WordPressClient WordPressClient
@inject NavigationManager NavigationManager
@inject Site Site

@if (notFound)
{
    <PageNotFound />
}
else
{
    @if (post != null)
    {
        <PageTitle>@post.Title.Rendered - @Site.Title</PageTitle>

        <HeadContent>
            <meta name="description" content="Test">
        </HeadContent>

        <h1 class="display-1">@post.Title.Rendered</h1>
        
        <small class="text-muted">@post.Date @post.Embedded.Author.Select(x => x.Name).First()</small>

        <div>@((MarkupString)post.Content.Rendered)</div>
    }
}

@code {
    private Post post;
    private bool loadingError;
    private bool notFound;

    [Parameter]
    public string Slug { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        notFound = false;
        loadingError = false;

        try
        {
            var queryBuilder = new PostsQueryBuilder();
            queryBuilder.Slugs = new List<string>() { Slug };
            queryBuilder.Statuses = new List<Status>() { Status.Publish };
            queryBuilder.Embed = true;

            var results = await WordPressClient.Posts.QueryAsync(queryBuilder);

            notFound = !results.Any();

            if (notFound) return;
            post = results.Single();
        }
        catch (WordPressPCL.Models.Exceptions.WPException)
        {
            notFound = true;
        }
        catch (Exception)
        {
            loadingError = true;
            return;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
