@page "/"
@implements IDisposable
@inject WordPressClient WordPressClient
@inject NavigationManager NavigationManager
@inject Site Site

@if (notFound)
{
    <PageNotFound />
}
else
{
    <PageTitle>@Site.Title</PageTitle>

    @if(posts != null) 
    {
        @foreach(var post in posts) 
        {
            <h1 class="display-1"><a href="/posts/@post.Slug" class="text-reset text-decoration-none">@post.Title.Rendered</a></h1>

            <small class="text-muted">@post.Date @post.Embedded.Author.Select(x => x.Name).First()</small>

            <div>@((MarkupString)post.Excerpt.Rendered.ReplaceMoreLink(post.Slug))</div>

            <hr />
        }

        <Pagination Page="@Page" PageCount="@TotalPages" />
    }
}

@code {
    private IEnumerable<Post> posts;
    private bool loadingError;
    private bool notFound;

    public int Page { get; set; } = 1;

    public int TotalPages { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadData();
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        notFound = false;
        loadingError = false;

        var uri = new Uri(NavigationManager.Uri);

        var result = QueryHelpers.ParseQuery(uri.Query);

        if (result.TryGetValue("page", out var page))
        {
            Page = int.Parse(page.First());
        }
        else
        {
            Page = 1;
        }

        try
        {
            var queryBuilder = new PostsQueryBuilder();
            queryBuilder.Statuses = new List<Status>() { Status.Publish };
            queryBuilder.Embed = true;
            queryBuilder.Page = Page;
            queryBuilder.PerPage = 5;

            posts = await WordPressClient.Posts.QueryAsync(queryBuilder);

            TotalPages = await WordPressClient.Posts.GetCountAsync();
        }
        catch(WordPressPCL.Models.Exceptions.WPException)
        {
            notFound = true;
        }
        catch
        {
            loadingError = true;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}